"use strict";var frameworkModules=["ngRoute"],appModules=["templates"],allModules=[].concat(frameworkModules,appModules);angular.module("todolistApp",allModules),angular.module("todolistApp").config(["$routeProvider",function(e){e.when("/:listName",{templateUrl:"modules/todoList/todo-list.html",controller:"TodoListController"}).otherwise("/Home")}]).controller("AppController",["$scope","$route","$routeParams","$location",function(e,t,o,l){e.$route=t,e.$location=l,e.$routeParams=o}]);var baseUrl="http://localhost:6543";angular.module("todolistApp").controller("TodoListController",["$scope","$http","$routeParams","$httpParamSerializerJQLike",function(o,l,e,n){var a=e.listName||"Home";o.newItem="Default new item text",o.listItems=function(e){l.get(baseUrl+"/api/lists/get/"+e).then(function(e){e.data.result&&(o.items=e.data.object)})},o.listItems(a),o.toggleComplete=function(e){console.log("item clicked",e),e.completed=!e.completed;var t=baseUrl+"/api/lists/"+a+"/items/"+e.id+"/mark_complete",e={completed:e.completed?"1":"0"},e=n(e);l.post(t,e,{headers:{"Content-Type":"application/x-www-form-urlencoded"}}).then(function(e){o.listItems(a)},function(e){console.log("Error: toggleComplete failed.")})},o.addItem=function(){console.log("addItem called"),console.log("item clicked",o.newItem);var e=baseUrl+"/api/lists/"+a+"/items/add",t={newItem:o.newItem},t=n(t);l.post(e,t,{headers:{"Content-Type":"application/x-www-form-urlencoded"}}).then(function(e){o.listItems(a)},function(e){console.log("Error: addItem failed.")})},o.delete=function(){console.log("delete button clicked");var e=baseUrl+"/api/lists/"+a+"/purge_completed";l.post(e).then(function(e){o.listItems(a)},function(e){console.log("Error: addItem failed.")})}}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsImFwcC9hcHAtY29udHJvbGxlci5qcyIsInRvZG9MaXN0L3RvZG8tbGlzdC1jb250cm9sbGVyLmpzIl0sIm5hbWVzIjpbImZyYW1ld29ya01vZHVsZXMiLCJhcHBNb2R1bGVzIiwiYWxsTW9kdWxlcyIsImNvbmNhdCIsImFuZ3VsYXIiLCJtb2R1bGUiLCJjb25maWciLCIkcm91dGVQcm92aWRlciIsIndoZW4iLCJ0ZW1wbGF0ZVVybCIsImNvbnRyb2xsZXIiLCJvdGhlcndpc2UiLCIkc2NvcGUiLCIkcm91dGUiLCIkcm91dGVQYXJhbXMiLCIkbG9jYXRpb24iLCJiYXNlVXJsIiwiJGh0dHAiLCIkaHR0cFBhcmFtU2VyaWFsaXplckpRTGlrZSIsInRvZG9MaXN0IiwibGlzdE5hbWUiLCJuZXdJdGVtIiwibGlzdEl0ZW1zIiwiZ2V0IiwidGhlbiIsInJlc3BvbnNlIiwiZGF0YSIsInJlc3VsdCIsIml0ZW1zIiwib2JqZWN0IiwidG9nZ2xlQ29tcGxldGUiLCJpdGVtIiwiY29uc29sZSIsImxvZyIsImNvbXBsZXRlZCIsInVybCIsImlkIiwicGFyYW1zIiwiZW5jb2RlZERhdGEiLCJwb3N0IiwiaGVhZGVycyIsIkNvbnRlbnQtVHlwZSIsImFkZEl0ZW0iLCJkZWxldGUiXSwibWFwcGluZ3MiOiJhQUVBLElBQUFBLGlCQUFBLENBQUEsV0FDQUMsV0FBQSxDQUFBLGFBRUFDLFdBQUEsR0FBQUMsT0FBQUgsaUJBQUFDLFlBQ0FHLFFBQUFDLE9BQUEsY0FBQUgsWUNOQUUsUUFBQUMsT0FBQSxlQUFBQyxPQUFBLENBQUEsaUJBQUEsU0FBQUMsR0FDQUEsRUFDQUMsS0FBQSxhQUFBLENBQ0FDLFlBQUEsa0NBQ0FDLFdBQUEsdUJBRUFDLFVBQUEsWUFHQUQsV0FBQSxnQkFBQSxDQUFBLFNBQUEsU0FBQSxlQUFBLFlBQUEsU0FBQUUsRUFBQUMsRUFBQUMsRUFBQUMsR0FDQUgsRUFBQUMsT0FBQUEsRUFDQUQsRUFBQUcsVUFBQUEsRUFDQUgsRUFBQUUsYUFBQUEsS0FHQSxJQUFBRSxRQUFBLHdCQ1pBWixRQUFBQyxPQUFBLGVBQUFLLFdBQUEscUJBQUEsQ0FBQSxTQUFBLFFBQUEsZUFBQSw2QkFBQSxTQUFBRSxFQUFBSyxFQUFBSCxFQUFBSSxHQUNBLElBQUFDLEVBQUFMLEVBQUFNLFVBQUEsT0FDQVIsRUFBQVMsUUFBQSx3QkFJQVQsRUFBQVUsVUFBQSxTQUFBRixHQUNBSCxFQUFBTSxJQUFBUCxRQUFBLGtCQUFBSSxHQUNBSSxLQUFBLFNBQUFDLEdBQ0FBLEVBQUFDLEtBQUFDLFNBQ0FmLEVBQUFnQixNQUFBSCxFQUFBQyxLQUFBRyxXQU1BakIsRUFBQVUsVUFBQUgsR0FFQVAsRUFBQWtCLGVBQUEsU0FBQUMsR0FDQUMsUUFBQUMsSUFBQSxlQUFBRixHQUNBQSxFQUFBRyxXQUFBSCxFQUFBRyxVQUNBLElBQUFDLEVBQUFuQixRQUFBLGNBQUFHLEVBQUEsVUFBQVksRUFBQUssR0FBQSxpQkFFQUMsRUFBQSxDQUFBSCxVQUFBSCxFQUFBRyxVQUFBLElBQUEsS0FDQUksRUFBQXBCLEVBQUFtQixHQUNBcEIsRUFBQXNCLEtBQUFKLEVBQUFHLEVBQUEsQ0FDQUUsUUFBQSxDQUNBQyxlQUFBLHVDQUdBakIsS0FBQSxTQUFBQyxHQUNBYixFQUFBVSxVQUFBSCxJQUNBLFNBQUFNLEdBQ0FPLFFBQUFDLElBQUEsb0NBSUFyQixFQUFBOEIsUUFBQSxXQUNBVixRQUFBQyxJQUFBLGtCQUNBRCxRQUFBQyxJQUFBLGVBQUFyQixFQUFBUyxTQUNBLElBQUFjLEVBQUFuQixRQUFBLGNBQUFHLEVBQUEsYUFDQWtCLEVBQUEsQ0FBQWhCLFFBQUFULEVBQUFTLFNBQ0FpQixFQUFBcEIsRUFBQW1CLEdBQ0FwQixFQUFBc0IsS0FBQUosRUFBQUcsRUFBQSxDQUNBRSxRQUFBLENBQ0FDLGVBQUEsdUNBR0FqQixLQUFBLFNBQUFDLEdBQ0FiLEVBQUFVLFVBQUFILElBQ0EsU0FBQU0sR0FDQU8sUUFBQUMsSUFBQSw2QkFJQXJCLEVBQUErQixPQUFBLFdBQ0FYLFFBQUFDLElBQUEseUJBQ0EsSUFBQUUsRUFBQW5CLFFBQUEsY0FBQUcsRUFBQSxtQkFFQUYsRUFBQXNCLEtBQUFKLEdBQ0FYLEtBQUEsU0FBQUMsR0FDQWIsRUFBQVUsVUFBQUgsSUFDQSxTQUFBTSxHQUNBTyxRQUFBQyxJQUFBIiwiZmlsZSI6InNjcmlwdHMubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZnJhbWV3b3JrTW9kdWxlcyA9IFsnbmdSb3V0ZSddO1xudmFyIGFwcE1vZHVsZXMgPSBbJ3RlbXBsYXRlcyddO1xuXG52YXIgYWxsTW9kdWxlcyA9IFtdLmNvbmNhdChmcmFtZXdvcmtNb2R1bGVzLCBhcHBNb2R1bGVzKTtcbmFuZ3VsYXIubW9kdWxlKCd0b2RvbGlzdEFwcCcsIGFsbE1vZHVsZXMpO1xuIiwiYW5ndWxhci5tb2R1bGUoJ3RvZG9saXN0QXBwJykuY29uZmlnKFsnJHJvdXRlUHJvdmlkZXInLCBmdW5jdGlvbigkcm91dGVQcm92aWRlcikge1xuICAkcm91dGVQcm92aWRlclxuICAgIC53aGVuKCcvOmxpc3ROYW1lJywge1xuICAgICAgdGVtcGxhdGVVcmw6ICdtb2R1bGVzL3RvZG9MaXN0L3RvZG8tbGlzdC5odG1sJyxcbiAgICAgIGNvbnRyb2xsZXI6ICdUb2RvTGlzdENvbnRyb2xsZXInXG4gICAgfSlcbiAgICAub3RoZXJ3aXNlKCcvSG9tZScpXG59XSlcblxuLmNvbnRyb2xsZXIoJ0FwcENvbnRyb2xsZXInLCBbICckc2NvcGUnLCAnJHJvdXRlJywgJyRyb3V0ZVBhcmFtcycsICckbG9jYXRpb24nLCBmdW5jdGlvbigkc2NvcGUsICRyb3V0ZSwgJHJvdXRlUGFyYW1zLCAkbG9jYXRpb24pIHtcbiAgICAkc2NvcGUuJHJvdXRlID0gJHJvdXRlO1xuICAgICRzY29wZS4kbG9jYXRpb24gPSAkbG9jYXRpb247XG4gICAgJHNjb3BlLiRyb3V0ZVBhcmFtcyA9ICRyb3V0ZVBhcmFtcztcbn1dKTtcblxudmFyIGJhc2VVcmwgPSAnaHR0cDovL2xvY2FsaG9zdDo2NTQzJztcbiIsIid1c2Ugc3RyaWN0J1xuXG4vLyBEZWZpbmUgdGhlIGBUb2RvTGlzdENvbnRyb2xsZXJgIGNvbnRyb2xsZXIgb24gdGhlIGB0b2RvbGlzdEFwcGAgbW9kdWxlXG5hbmd1bGFyLm1vZHVsZSgndG9kb2xpc3RBcHAnKS5jb250cm9sbGVyKCdUb2RvTGlzdENvbnRyb2xsZXInLCBbJyRzY29wZScsICckaHR0cCcsICckcm91dGVQYXJhbXMnLCAnJGh0dHBQYXJhbVNlcmlhbGl6ZXJKUUxpa2UnLCBmdW5jdGlvbiBUb2RvTGlzdENvbnRyb2xsZXIoJHNjb3BlLCAkaHR0cCwgJHJvdXRlUGFyYW1zLCAkaHR0cFBhcmFtU2VyaWFsaXplckpRTGlrZSkge1xuICB2YXIgdG9kb0xpc3QgPSAkcm91dGVQYXJhbXMubGlzdE5hbWUgfHwgJ0hvbWUnOyAvLyBmZXRjaCB0aGlzIGZyb20gYW5ndWxhciByb3V0ZVxuICAkc2NvcGUubmV3SXRlbSA9ICdEZWZhdWx0IG5ldyBpdGVtIHRleHQnO1xuXG4gIC8vYCR7YmFzZVVybH0vYXBpL2xpc3RzL2dldC8ke3RvZG9MaXN0fWBcblxuICAkc2NvcGUubGlzdEl0ZW1zID0gZnVuY3Rpb24obGlzdE5hbWUpIHtcbiAgICAkaHR0cC5nZXQoYmFzZVVybCArICcvYXBpL2xpc3RzL2dldC8nICsgbGlzdE5hbWUpXG4gICAgLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgIGlmKHJlc3BvbnNlLmRhdGEucmVzdWx0KSB7XG4gICAgICAgICRzY29wZS5pdGVtcyA9IHJlc3BvbnNlLmRhdGEub2JqZWN0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZXJyb3IgaGFuZGxlciBvZiBzb21lIHNvcnRcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcbiAgJHNjb3BlLmxpc3RJdGVtcyh0b2RvTGlzdCk7XG5cbiAgJHNjb3BlLnRvZ2dsZUNvbXBsZXRlID0gZnVuY3Rpb24oaXRlbSkge1xuICAgIGNvbnNvbGUubG9nKCdpdGVtIGNsaWNrZWQnLCBpdGVtKTtcbiAgICBpdGVtLmNvbXBsZXRlZCA9ICFpdGVtLmNvbXBsZXRlZDtcbiAgICB2YXIgdXJsID0gYmFzZVVybCArICcvYXBpL2xpc3RzLycgKyB0b2RvTGlzdCArICcvaXRlbXMvJyArIGl0ZW0uaWQgKyAnL21hcmtfY29tcGxldGUnO1xuXG4gICAgdmFyIHBhcmFtcyA9IHtjb21wbGV0ZWQ6IGl0ZW0uY29tcGxldGVkID8gJzEnIDogJzAnfTtcbiAgICB2YXIgZW5jb2RlZERhdGEgPSAkaHR0cFBhcmFtU2VyaWFsaXplckpRTGlrZShwYXJhbXMpO1xuICAgICRodHRwLnBvc3QodXJsLCBlbmNvZGVkRGF0YSwge1xuICAgICAgaGVhZGVyczoge1xuICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCdcbiAgICAgIH1cbiAgICB9KVxuICAgIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAkc2NvcGUubGlzdEl0ZW1zKHRvZG9MaXN0KTtcbiAgICB9LCBmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiRXJyb3I6IHRvZ2dsZUNvbXBsZXRlIGZhaWxlZC5cIik7XG4gICAgfSk7XG4gIH1cblxuICAkc2NvcGUuYWRkSXRlbSA9IGZ1bmN0aW9uKCkge1xuICAgIGNvbnNvbGUubG9nKCdhZGRJdGVtIGNhbGxlZCcpO1xuICAgIGNvbnNvbGUubG9nKCdpdGVtIGNsaWNrZWQnLCAkc2NvcGUubmV3SXRlbSk7XG4gICAgdmFyIHVybCA9IGJhc2VVcmwgKyAnL2FwaS9saXN0cy8nICsgdG9kb0xpc3QgKyAnL2l0ZW1zL2FkZCc7XG4gICAgdmFyIHBhcmFtcyA9IHtuZXdJdGVtOiAkc2NvcGUubmV3SXRlbX07XG4gICAgdmFyIGVuY29kZWREYXRhID0gJGh0dHBQYXJhbVNlcmlhbGl6ZXJKUUxpa2UocGFyYW1zKTtcbiAgICAkaHR0cC5wb3N0KHVybCwgZW5jb2RlZERhdGEsIHtcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnXG4gICAgICB9XG4gICAgfSlcbiAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgJHNjb3BlLmxpc3RJdGVtcyh0b2RvTGlzdCk7XG4gICAgfSwgZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICBjb25zb2xlLmxvZyhcIkVycm9yOiBhZGRJdGVtIGZhaWxlZC5cIik7XG4gICAgfSk7XG4gIH1cblxuICAkc2NvcGUuZGVsZXRlID0gZnVuY3Rpb24oKSB7XG4gICAgY29uc29sZS5sb2coJ2RlbGV0ZSBidXR0b24gY2xpY2tlZCcpO1xuICAgIHZhciB1cmwgPSBiYXNlVXJsICsgJy9hcGkvbGlzdHMvJyArIHRvZG9MaXN0ICsgJy9wdXJnZV9jb21wbGV0ZWQnO1xuXG4gICAgJGh0dHAucG9zdCh1cmwpXG4gICAgLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICRzY29wZS5saXN0SXRlbXModG9kb0xpc3QpO1xuICAgIH0sIGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgY29uc29sZS5sb2coXCJFcnJvcjogYWRkSXRlbSBmYWlsZWQuXCIpO1xuICAgIH0pO1xuICB9XG5cbn1dKTtcbiJdfQ==
